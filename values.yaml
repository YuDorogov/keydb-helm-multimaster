# Default values for keydb.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates

replicaCount: 3

keydb:
  password: "CHANGEMEFIRCT"
  port: 6379
  threads: 2
  activereplica: "yes"
  multimaster: "yes"
  appendonly: "no"
#  module: "redistimeseries.so"
# Extra arguments for keydb-server
  extraArgs: {}
#    loglevel: debug

image:
  repository: pozetroninc/keydb
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v6.0.16" # "v5.3.3"

persistence:
  enabled: false
# Annotations to add on persistence resources
#  annotations: {}
# Storage settings to create a PV and PVC
  size: 3G
# For no storage class enter "-", empty or not specifying will result in default storage class
  storageClass: "" 
  accessMode: ReadWriteOnce
# Specify if PVC already exists
#  existingClaim: NameOfExistingPVC

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000
  # sysctls:
  # - name: net.core.somaxconn
  #   value: "512"
  # - name: vm.overcommit_memory
  #   value: "1"

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: keydb-example.local
      paths: []
  tls: []
  #  - secretName: keydb-example-tls
  #    hosts:
  #      - keydb-example.local

resources: {}
 # limits:
 #  cpu: 2
 #  memory: 2Gi
 # requests:
 #  cpu: 500m
 #  memory: 1Gi

nodeSelector: {}

tolerations: []

# This tries to avoid having two (or more) pods on the same node as well as
# trying to spread them out over different cloud provider zones.
affinity:
    podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
                matchLabels:
                    app.kubernetes.io/name: keydb
            topologyKey: "topology.kubernetes.io/zone"
          weight: 100
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
                app.kubernetes.io/name: keydb
          topologyKey: "kubernetes.io/hostname"

# Prometheus-operator ServiceMonitor
serviceMonitor:
  # Redis exporter must also be enabled
  enabled: false
  labels:
  annotations:
  interval: 30s
  # scrapeTimeout: 20s

# Redis exporter
exporter:
  enabled: false
  image: oliver006/redis_exporter:v1.23.1-alpine
  pullPolicy: IfNotPresent

  # Prometheus port & scrape path
  port: 9121
  scrapePath: /metrics

  # Liveness Probe
  livenessProbe:
    httpGet:
      path: /health
      port: 9121

  # Readiness Probe
  readinessProbe:
    httpGet:
      path: /health
      port: 9121

  # Startup Probe
  startupProbe:
    httpGet:
      path: /health
      port: 9121
    failureThreshold: 30
    periodSeconds: 5

  # CPU/Memory resource limits/requests
  resources: {}

  # Additional args for redis exporter
  extraArgs: {}
